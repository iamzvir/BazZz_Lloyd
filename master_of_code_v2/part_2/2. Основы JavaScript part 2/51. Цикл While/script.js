

/**** Цикл WHILE ******/

// цикл while читается как ПОКА... и в круглых скобках мы указываем выражение которое возвращает boolean значение, если true - цикл будет выполняться, если false - цикл выполняться не будет.

console.log('\nЦикл WHILE');

// В этом цикле while инициализация переменной счетчика происходит за пределами цикла, до цикла, а счетчик увеличения или уменьшения указваем непосредственно в теле цикла.

let rep = 1;

while (rep <= 10) {
  console.log(`Push ups repetition ${rep}`);
  rep++;
}

console.log('\n');

/***** Пример где в цикле while не задействован счетчик инкремента *****/

// Типа повторим принцип игры в кости, где отображены точки от одного до шести на каждом кубике
// Кидаем кубик до тех пор пока не выпадет шестерка
// По этому мы не знаем сколько раз будет запущен цикл и нам здесь не нужна переменная счетчик

// для случайного числа используем переменную - число на кубике (diceNumber)
// Math.random() - возвращает случайное число от 0 до 1, а если мы умножим это на 6 то получим десятичные числа от 0 до 6, но не целые, что бы избавиться от десятичной части используем метод Math.trunc() а уже в нем (Math.random() * 6), это даст нам числа от 0 до 5, а нам нужно до 6, а значит внутри Math.random() * 6 доплюсуем еденицу (Math.random() * 6) + 1

let diceNumber = Math.trunc(Math.random() * 6) + 1; // генерируем случайное число и передаем его в переменную diceNumber
console.log(`Изначальное число которое попадает в условие цикла ${diceNumber}`);


while (diceNumber !== 6) { // код отработает когда в условие НЕ попадет шестерка
  console.log(`число ${diceNumber} после булин проверки вывелось в консоль и запустился рандомный бросок`); // этот вывод произойдет если в условии true
  diceNumber = Math.trunc(Math.random() * 6) + 1; // генерируем новое случайное число и передаем его в переменную diceNumber
  console.log(`Число ${diceNumber} после рандомного броска из тела цикла отправляется в булин проверку`);  // вывод результата генерации случайного числа ранее
}

// P.S Если мы не знаем количество итераций - удобнее использовать цикл while, если же кол-во итераций нам известно или понятно то лучше использовать цикл for.

console.log(Math.random() * 6);

console.log('\n\n\n');


/**/
// let kubik = Math.random() * 6; Если Math.random генерирует от 0 до 1 то умножив на 6 мы получим цифры в пределах от 1.0 до 5.9 с десятыми
// let kubik = Math.trunc(Math.random() * 6); Чтобы убрать десятые и получить целое число используем метод Math.trunc()
// let kubik = Math.trunc(Math.random() * 6) + 1; Но теперь убрав десятые мы получим максимум 5, и чтобы получить 6 прибавим Math.trunc() + 1
// console.log(kubik);



// когда выпадет 6ка цикл остановиться, в консоли в этом коде нам 6ку не выведет
let kubik = Math.trunc(Math.random() * 6) + 1;
console.log(`Кубик до начала цикла ${kubik} и эта же цифра попадает в проверку условия`);

while (kubik !== 6) {
  console.log(`${kubik} цифра в условии в данный момент`);
  kubik = Math.trunc(Math.random() * 6) + 1; // меняем на каждом шаге число на кубике
  console.log(`${kubik} получаем внутри цикла, далее цифра попадает в условие`);
}